services:
  invoicer_base: &invoicer_base
    image: alaksion/invoicer-api:0.0.14
    environment:
      INVOICER_DB_USERNAME: $INVOICER_DB_USERNAME
      INVOICER_DB_PASSWORD: $INVOICER_DB_PASSWORD
      INVOICER_DB_NAME: $INVOICER_DB_NAME
      INVOICER_DB_URL: $INVOICER_DB_URL
      INVOICER_JWT_AUDIENCE: $INVOICER_JWT_AUDIENCE
      INVOICER_JWT_ISSUER: $INVOICER_JWT_ISSUER
      INVOICER_JWT_SECRET: $INVOICER_JWT_SECRET
      INVOICER_JWT_REALM: $INVOICER_JWT_REALM
      INVOICER_API_PORT: $INVOICER_API_PORT
      INVOICER_REDIS_PORT: $INVOICER_REDIS_PORT
      INVOICER_REDIS_HOST: $INVOICER_REDIS_HOST
      INVOICER_REDIS_TTL: $INVOICER_REDIS_TTL
    restart: always
    networks:
      - invoicer-network
    depends_on:
      - invoicer-database
  invoicer-main:
    <<: *invoicer_base
    container_name: invoicer-api-main
    ports:
      - "8080:8080"
  invoicer-fallback:
    <<: *invoicer_base
    ports:
      - "8081:8080"
    container_name: invoicer-api-fallback
  invoicer-database:
    container_name: invoicer-postgre
    image: postgres:latest
    restart: always
    networks:
      - invoicer-network
    environment:
      POSTGRES_USER: ${INVOICER_DB_USERNAME}
      POSTGRES_PASSWORD: ${INVOICER_DB_PASSWORD}
      POSTGRES_DB: ${INVOICER_DB_NAME}
    ports:
      - "5432:5432"
    volumes:
      - postgres-data:/var/lib/postgresql/data
      - ./sql:/docker-entrypoint-initdb.d
  invoicer-prometheus:
    container_name: invoicer-prometheus
    image: prom/prometheus:v3.1.0
    restart: always
    ports:
      - "9090:9090"
    volumes:
      - ./prometheus.yml:/etc/prometheus/prometheus.yml
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
    networks:
      - invoicer-network
    depends_on:
      - invoicer-nginx
  invoicer-grafana:
    container_name: invoicer-grafana
    restart: always
    image: grafana/grafana:11.5.0
    ports:
      - "3000:3000"
    depends_on:
      - invoicer-prometheus
    networks:
      - invoicer-network
  invoicer-nginx:
    container_name: invoicer-nginx
    image: nginx:1.27-perl
    restart: always
    ports:
      - "4000:4000"
    networks:
      - invoicer-network
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf
  invoicer-redis:
    container_name: invoicer-redis
    restart: always
    image: redis:7.0
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - invoicer-network
  invoicer-elasticsearch:
    container_name: invoicer-elasticsearch
    restart: always
    image: docker.elastic.co/elasticsearch/elasticsearch:7.15.1
    ports:
      - "9200:9200"
    networks:
      - invoicer-network
    volumes:
      - ./elasticsearch/elasticsearch.yml:/usr/share/elasticsearch/config/elasticsearch.yml
      - elastisearch_data:/usr/share/elasticsearch/data
  invoicer-logstash:
    container_name: invoicer-logstash
    restart: always
    image: docker.elastic.co/logstash/logstash:7.15.1
    ports:
      - "5001:5000"
    networks:
      - invoicer-network
    volumes:
      - ./logstash/logstash.conf:/usr/share/logstash/pipeline/logstash.conf
    depends_on:
      - invoicer-elasticsearch
  invoicer-kibana:
    container_name: invoicer-kibana
    restart: always
    image: docker.elastic.co/kibana/kibana:7.15.1
    ports:
      - "5601:5601"
    networks:
      - invoicer-network
    depends_on:
      - invoicer-elasticsearch
    volumes:
      - ./kibana/kibana.yml:/usr/share/kibana/config/kibana.yml
  invoicer-minio:
    image: minio/minio:latest
    container_name: invoicer-minion
    restart: unless-stopped
    command: server /data --console-address ":9001"
    environment:
      MINIO_ROOT_USER: $MINIO_USER  
      MINIO_ROOT_PASSWORD: $MINIO_PASSWORD
    volumes:
      - ./minio_data:/data
    ports:
      - "9000:9000"  
      - "9001:9001"
    networks:
      - invoicer-network
volumes:
  postgres-data:
  redis_data:
  elastisearch_data:
  minio_data:
networks:
  invoicer-network:
    driver: bridge