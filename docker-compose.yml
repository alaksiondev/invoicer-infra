services:
  invoicer_base: &invoicer_base
    image: alaksion/invoicer-api:0.0.23
    environment:
      INVOICER_DB_USERNAME: $INVOICER_DB_USERNAME
      INVOICER_DB_PASSWORD: $INVOICER_DB_PASSWORD
      INVOICER_DB_NAME: $INVOICER_DB_NAME
      INVOICER_DB_URL: $INVOICER_DB_URL
      INVOICER_JWT_AUDIENCE: $INVOICER_JWT_AUDIENCE
      INVOICER_JWT_ISSUER: $INVOICER_JWT_ISSUER
      INVOICER_JWT_SECRET: $INVOICER_JWT_SECRET
      INVOICER_JWT_REALM: $INVOICER_JWT_REALM
      INVOICER_API_PORT: $INVOICER_API_PORT
      INVOICER_REDIS_PORT: $INVOICER_REDIS_PORT
      INVOICER_REDIS_HOST: $INVOICER_REDIS_HOST
      INVOICER_REDIS_TTL: $INVOICER_REDIS_TTL
      INVOICER_MIN_IO_ACCESS_KEY: $INVOICER_MIN_IO_ACCESS_KEY
      INVOICER_MIN_IO_SECRET_KEY: $INVOICER_MIN_IO_SECRET_KEY
      INVOICER_MIN_IO_BUCKET: $INVOICER_MIN_IO_BUCKET
      INVOICER_LOGSTASH: $INVOICER_LOGSTASH
      INVOICER_KAFKA_BOOTSTRAP_SERVERS: $INVOICER_KAFKA_BOOTSTRAP_SERVERS
      INVOICER_MIN_IO_URL: $INVOICER_MIN_IO_URL
      PDF_EXTERNAL_HOST: "http://invoicer-nginx:4000"
    restart: always
    networks:
      - invoicer-network
    depends_on:
      - invoicer-database
  invoicer-main:
    <<: *invoicer_base
    container_name: invoicer-service
    ports:
      - "8080:8080"
  invoicer-fallback:
    <<: *invoicer_base
    ports:
      - "8081:8080"
    container_name: invoicer-service-2
  invoicer-database:
    container_name: postgre
    image: postgres:latest
    restart: always
    networks:
      - invoicer-network
    environment:
      POSTGRES_USER: ${INVOICER_DB_USERNAME}
      POSTGRES_PASSWORD: ${INVOICER_DB_PASSWORD}
      POSTGRES_DB: ${INVOICER_DB_NAME}
    ports:
      - "5432:5432"
    volumes:
      - postgres-data:/var/lib/postgresql/data
      - ./sql:/docker-entrypoint-initdb.d
  invoicer-prometheus:
    container_name: prometheus
    image: prom/prometheus:v3.1.0
    restart: always
    ports:
      - "9090:9090"
    volumes:
      - ./prometheus.yml:/etc/prometheus/prometheus.yml
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
    networks:
      - invoicer-network
    depends_on:
      - invoicer-nginx
  invoicer-grafana:
    container_name: grafana
    restart: always
    image: grafana/grafana:11.5.0
    ports:
      - "3000:3000"
    depends_on:
      - invoicer-prometheus
    networks:
      - invoicer-network
  invoicer-nginx:
    container_name: nginx
    image: nginx:1.27-perl
    restart: always
    ports:
      - "4000:4000"
    networks:
      - invoicer-network
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf
  invoicer-redis:
    container_name: redis
    restart: always
    image: redis:7.0
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - invoicer-network
  invoicer-elasticsearch:
    container_name: invoicer-elasticsearch
    restart: always
    image: docker.elastic.co/elasticsearch/elasticsearch:7.15.1
    profiles:
      - log
    ports:
      - "9200:9200"
    networks:
      - invoicer-network
    volumes:
      - ./elasticsearch/elasticsearch.yml:/usr/share/elasticsearch/config/elasticsearch.yml
      - elastisearch_data:/usr/share/elasticsearch/data
  invoicer-logstash:
    container_name: invoicer-logstash
    restart: always
    image: docker.elastic.co/logstash/logstash:7.15.1
    ports:
      - "5001:5000"
    networks:
      - invoicer-network
    volumes:
      - ./logstash/logstash.conf:/usr/share/logstash/pipeline/logstash.conf
    depends_on:
      - invoicer-elasticsearch
    profiles:
      - log
  invoicer-kibana:
    container_name: invoicer-kibana
    restart: always
    image: docker.elastic.co/kibana/kibana:7.15.1
    ports:
      - "5601:5601"
    networks:
      - invoicer-network
    depends_on:
      - invoicer-elasticsearch
    volumes:
      - ./kibana/kibana.yml:/usr/share/kibana/config/kibana.yml
    profiles:
      - log
  invoicer-minio:
    image: minio/minio:latest
    container_name: MinIO
    restart: unless-stopped
    command: server /data --console-address ":9001"
    environment:
      MINIO_ROOT_USER: $MINIO_USER  
      MINIO_ROOT_PASSWORD: $MINIO_PASSWORD
    volumes:
      - ./minio_data:/data
    ports:
      - "9000:9000"  
      - "9001:9001"
    networks:
      - invoicer-network
  kafka-ui:
    container_name: kafka-ui
    image: provectuslabs/kafka-ui:latest
    ports:
      - 8083:8080
    depends_on:
      - invoicer-kafka
    environment:
      - KAFKA_CLUSTERS_0_NAME=Invoicer-Cluster
      - KAFKA_CLUSTERS_0_BOOTSTRAPSERVERS=invoicer-kafka:9092
    networks:
      - invoicer-network
  invoicer-kafka:
    container_name: invoicer-kafka
    image: 'bitnami/kafka:latest'
    ports:
      - 19090:19090
    volumes:
      - kafka-logs:/bitnami/kafka
    environment:
      - KAFKA_CFG_NODE_ID=1
      - KAFKA_ENABLE_KRAFT=yes
      - KAFKA_CFG_BROKER_ID=1
      - KAFKA_KRAFT_CLUSTER_ID=wgKhKz7iTay9sC-lFiIkTg
      - KAFKA_CFG_PROCESS_ROLES=broker,controller
      - KAFKA_CFG_INTER_BROKER_LISTENER_NAME=INTERNAL
      - KAFKA_CFG_CONTROLLER_LISTENER_NAMES=CONTROLLER
      - KAFKA_CFG_LISTENER_SECURITY_PROTOCOL_MAP=INTERNAL:PLAINTEXT,EXTERNAL:PLAINTEXT,CONTROLLER:PLAINTEXT
      - KAFKA_CFG_LISTENERS=INTERNAL://invoicer-kafka:9092,EXTERNAL://:19090,CONTROLLER://:9094
      - KAFKA_ADVERTISED_LISTENERS=INTERNAL://invoicer-kafka:9092,EXTERNAL://192.168.0.92:19090
      - KAFKA_CFG_CONTROLLER_QUORUM_VOTERS=1@invoicer-kafka:9094
      - ALLOW_PLAINTEXT_LISTENER=yes
    networks:
      - invoicer-network
volumes:
  postgres-data:
  redis_data:
  elastisearch_data:
  minio_data:
  kafka-logs:
networks:
  invoicer-network:
    driver: bridge